Autowiring with Annotations
Spring also supports autowiring using annotations, which is the preferred approach in modern Spring applications.

1. @Autowired
Usage:

Marks a constructor, field, setter method, or configuration method to be autowired by Spring's dependency injection facilities.
Constructor Injection:

java code:


public class ExampleService {
    private final ExampleRepository exampleRepository;

    @Autowired
    public ExampleService(ExampleRepository exampleRepository) {
        this.exampleRepository = exampleRepository;
    }
}

=>Setter Injection:

java code:


public class ExampleService {
    private ExampleRepository exampleRepository;

    @Autowired
    public void setExampleRepository(ExampleRepository exampleRepository) {
        this.exampleRepository = exampleRepository;
    }
}

=>Field Injection:

java code:

public class ExampleService {
    @Autowired
    private ExampleRepository exampleRepository;
}
When to Use:

@Autowired is commonly used for its simplicity and readability, making dependencies clearly visible in the code.

2. @Qualifier
Usage:

Used alongside @Autowired to resolve conflicts when multiple beans of the same type exist.
Example:

java code:

public class ExampleService {
    private ExampleRepository exampleRepository;

    @Autowired
    @Qualifier("specificExampleRepository")
    public void setExampleRepository(ExampleRepository exampleRepository) {
        this.exampleRepository = exampleRepository;
    }
}

When to Use:

When you need to specify which bean to inject among multiple candidates.
3. @Resource
Usage:

From JSR-250, @Resource can be used for dependency injection based on name or type.
Example:

java code:

public class ExampleService {
    @Resource(name = "exampleRepository")
    private ExampleRepository exampleRepository;
}

When to Use:

When you want to follow JSR-250 standard annotations or prefer name-based injection.
